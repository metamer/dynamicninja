<?xml version="1.0"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="console" default="default" basedir=".">

  <!-- global properties -->

  <property name="src.dir" location="src" />
  <property name="lib.dir" location="lib" />
  <property name="build.dir" location="build" />
  <property name="obj.dir" location="obj" />
  <property name="test.classes.dir" location="${build.dir}/test" />
  <property name="test.data.dir" location="${build.dir}/test-report" />

  <property name="junit.fork" value="true" />

  <!-- setup classpaths -->

  <path id="build.classpath">
    <fileset dir="${lib.dir}">
      <include name="**/*.jar" />
    </fileset>
  </path>

  <path id="test.classpath">
    <fileset dir="${lib.dir}">
      <include name="**/*.jar" />
    </fileset>
  </path>

  <!-- change default target here -->
  <target name="default" depends="dist" description="default target"/>

  <!-- platform dependence -->

  <target name="check-os" description="check operating system">

    <condition property="isMac">
      <os family="mac" />
    </condition>

    <condition property="isWindows">
      <os family="windows" />
    </condition>

    <condition property="isUnix">
      <os family="unix" />
    </condition>
  </target>

  <target name="check-arch" description="check processor architecture">
    <condition property="is64bit">
      <os arch="amd64" />
    </condition>

    <condition property="is32bit">
      <os arch="i386" />
    </condition>
  </target>

  <target name="set-build-env" depends="check-os, check-arch" description="setup build environment variables"/>

  <!-- dependency resolution -->

  <target name="resolve" description="retrieve dependencies with ivy">
    <ivy:retrieve />
  </target>
  <!--  jCurses 
        handled separately since it is currently not on maven and requires local dynamically linked libs 
  -->

  <target name="jcurses-set-env" depends="set-build-env">

    <condition property="jcurses.obj.name" value="libjcurses.so">
      <and>
        <istrue value="${isUnix}" />
        <istrue value="${is32bit}" />
      </and>
    </condition>

    <condition property="jcurses.obj.name" value="libjcurses64.so">
      <and>
        <istrue value="${isUnix}" />
        <istrue value="${is64bit}" />
      </and>
    </condition>

    <condition property="jcurses.obj.name" value="libjcurses.dll">
      <and>
        <istrue value="${isWindows}" />
        <istrue value="${is32bit}" />
      </and>
    </condition>

    <condition property="jcurses.obj.name" value="libjcurses64.dll">
      <and>
        <istrue value="${isWindows}" />
        <istrue value="${is64bit}" />
      </and>
    </condition>

    <echo>
    Target jcurses object file is ${jcurses.obj.name}
    </echo>

  </target>

  <target name="jcurses-pre-load-check" depends="jcurses-set-env">
    <condition property="jcurses.lib.loaded">
      <available file="${lib.dir}/${jcurses.obj.name}" />
    </condition>
  </target>

  <target name="jcurses-lib-load" depends="jcurses-pre-load-check" unless="${jcurses.lib.loaded}">
    <echo>
        Copying ${jcurses.obj.name} from ${obj.dir} to ${lib.dir}
    </echo>
    <copy file="${obj.dir}/${jcurses.obj.name}" todir="${lib.dir}" overwrite="true" />

    <property name="jcurses.lib.loaded" value="true" />
  </target>

  <!-- non-standard utility targets -->

  <target name="prepare-libs" depends="resolve,jcurses-lib-load" description="prepare libs after resolving" />

  <target name="clean-libs" description="remove libs loaded during build">
    <delete>
      <fileset dir="${lib.dir}" includes="*.dll,*.so" />
    </delete>
    <delete>
      <fileset dir="${lib.dir}" includes="*.jar" excludes="jcurses.jar"/>
    </delete>
  </target>

  <target name="compile" depends="init" description="init then compile classes">
    <javac srcdir="${src.dir}" 
      destdir="${build.dir}" 
      classpathref="build.classpath" 
      includeantruntime="false"
    />
  </target>

  <target name="re-init" depends="clean,init" description="clean then init"/>

  <target name="recompile" depends="clean,init,compile" description="clean then compile"/>

  <!-- standard targets -->

  <target name="test" depends="compile" description="run JUnit tests">
    <mkdir dir="${test.data.dir}"/>
    <junit printsummary="no"
           errorProperty="test.failed" 
           failureProperty="test.failed" 
           fork="${junit.fork}">
      <classpath refid="test.classpath"/>
      <formatter type="brief" usefile="false"/>
      <formatter type="xml"/>
      <test name="${testcase}" if="testcase"/>
      <batchtest todir="${test.data.dir}" unless="testcase">
        <fileset dir="${test.classes.dir}" 
                 includes="**/*Test.class" 
        />
      </batchtest>
    </junit>
    <junitreport todir="${test.data.dir}">
      <fileset dir="${test.data.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${test.data.dir}"/>
    </junitreport>
  </target>

  <target name="distclean" description ="clean distributables prepared by dist">
  </target>

  <target name="clean" depends="distclean, clean-libs" description="clean all files">
    <delete dir="${build.dir}" />
  </target>

  <target name="init" depends="resolve,prepare-libs" description="initialize directory structure and dependencies">
    <mkdir dir="${build.dir}" />
  </target>

  <target name="dist" depends="compile" description="sets up distributables">
  </target>

  <target name="all" depends="test,dist" description="run tests then distribute"/>

</project>